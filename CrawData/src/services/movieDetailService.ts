import { MovieModel } from '../models/Movie';
import { MovieDetailModel } from '../models/MovieDetail';
import axios from 'axios';
import { delay, retry } from '../utils/common';

const baseURL = process.env.API_URL || 'https://ophim1.com';
let isProcessing = false;

export const processMovieDetails = async (): Promise<void> => {
  if (isProcessing) {
    console.log('ƒêang trong qu√° tr√¨nh x·ª≠ l√Ω chi ti·∫øt phim...');
    return;
  }

  try {
    isProcessing = true;

    const movies = await MovieModel.find({
      slug: {
        $nin: await MovieDetailModel.distinct('movie.slug')
      }
    }).select('_id slug').lean();


    console.log(`üîç T√¨m th·∫•y ${movies.length} phim c·∫ßn c·∫≠p nh·∫≠t chi ti·∫øt`);

    let successCount = 0;
    let errorCount = 0;

    for (const movie of movies) {
      try {
        const slugValue = Array.isArray(movie.slug) ? movie.slug[0] : movie.slug;
        if (!slugValue) {
          console.error(`‚ö†Ô∏è B·ªè qua phim v·ªõi ID ${movie._id}: Slug kh√¥ng h·ª£p l·ªá`);
          errorCount++;
          continue;
        }

        const existingDetail = await MovieDetailModel.findOne({
          'movie.slug': slugValue
        });

        if (existingDetail) {
          console.log(`‚è© B·ªè qua phim ${slugValue}: ƒê√£ t·ªìn t·∫°i trong DB`);
          continue;
        }

        // S·ª≠ d·ª•ng h√†m retry ƒë·ªÉ x·ª≠ l√Ω vi·ªác g·ªçi API
        const response = await retry(
          async () => {
            const requestUrl = `${baseURL}/phim/${slugValue}`;
            console.log(`üåê ƒêang g·ªçi API v·ªõi URL: ${requestUrl}`);

            const res = await axios.get(requestUrl, {
              timeout: 5000
            });
            if (!res?.data?.movie || !res?.data?.episodes) {
              throw new Error('D·ªØ li·ªáu API kh√¥ng h·ª£p l·ªá');
            }

            // X·ª≠ l√Ω slug cho server_data
            res.data.episodes.forEach((episode: any) => {
              episode.server_data = episode.server_data.map((data: any) => ({
                ...data,
                slug: data.name.toLowerCase().replace(/\s+/g, '-') // T·∫°o slug t·ª´ name
              }));
            });

            return res;
          },
          3,
          1000
        );



        const movieData = {
          ...response.data.movie,
          slug: slugValue // ƒê·∫£m b·∫£o l∆∞u gi√° tr·ªã slug ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
        };

        // L∆∞u v√†o database
        await MovieDetailModel.create({
          movie: movieData,
          episodes: response.data.episodes
        });

        successCount++;
        console.log(`‚úÖ ƒê√£ l∆∞u chi ti·∫øt phim: ${slugValue}`);

        await delay(1000);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω phim ${movie._id}:`, error);
        continue;
      }
    }

    console.log(`
üéØ K·∫øt qu·∫£ x·ª≠ l√Ω:
- T·ªïng s·ªë phim: ${movies.length}
- Th√†nh c√¥ng: ${successCount}
- Th·∫•t b·∫°i: ${errorCount}
    `);

  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω chi ti·∫øt phim:', error);
    throw error;
  } finally {
    isProcessing = false;
  }
};
