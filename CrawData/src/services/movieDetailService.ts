import axios from 'axios';
import { MovieModel } from '../models/Movie';
import { MovieDetailModel } from '../models/MovieDetail';

const baseURL = 'https://ophim1.com';
let isProcessing = false;

const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

export const processMovieDetails = async (): Promise<void> => {
  if (isProcessing) {
    console.log('ƒêang trong qu√° tr√¨nh x·ª≠ l√Ω chi ti·∫øt phim...');
    return;
  }

  try {
    isProcessing = true;

    // L·∫•y danh s√°ch phim ch∆∞a c√≥ chi ti·∫øt
    const movies = await MovieModel.find({
      slug: {
        $nin: await MovieDetailModel.distinct('movie.slug')
      }
    }).select('_id slug').lean();

    console.log(`üîç T√¨m th·∫•y ${movies.length} phim c·∫ßn c·∫≠p nh·∫≠t chi ti·∫øt`);

    let successCount = 0;
    let errorCount = 0;

    for (const movie of movies) {
      try {
        // Ki·ªÉm tra l·∫°i xem phim ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        const existingDetail = await MovieDetailModel.findOne({ 'movie.slug': movie.slug });
        if (existingDetail) {
          console.log(`‚è© B·ªè qua phim ${movie.slug}: ƒê√£ t·ªìn t·∫°i trong DB`);
          continue;
        }

        // G·ªçi API v·ªõi retry mechanism
        const maxRetries = 3;
        let retryCount = 0;
        let response;

        while (retryCount < maxRetries) {
          try {
            response = await axios.get(`${baseURL}/phim/${movie.slug}`, {
              timeout: 5000
            });
            break;
          } catch (error) {
            retryCount++;
            if (retryCount === maxRetries) throw error;
            await delay(1000 * retryCount);
            console.log(`üîÑ Th·ª≠ l·∫°i l·∫ßn ${retryCount} cho phim: ${movie.slug}`);
          }
        }

        if (!response?.data?.movie || !response?.data?.episodes) {
          console.log(`‚ö†Ô∏è B·ªè qua phim ${movie.slug}: D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá`);
          errorCount++;
          continue;
        }

        // L∆∞u v√†o database
        await MovieDetailModel.create({
          movie_id: movie._id,
          movie: response.data.movie,
          episodes: response.data.episodes
        });

        successCount++;
        console.log(`‚úÖ ƒê√£ l∆∞u chi ti·∫øt phim: ${movie.slug}`);

        // Delay ƒë·ªÉ tr√°nh qu√° t·∫£i API
        await delay(1000);
      } catch (error) {
        errorCount++;
        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω phim ${movie.slug}:`, error);
        continue;
      }
    }

    console.log(`
üéØ K·∫øt qu·∫£ x·ª≠ l√Ω:
- T·ªïng s·ªë phim: ${movies.length}
- Th√†nh c√¥ng: ${successCount}
- Th·∫•t b·∫°i: ${errorCount}
    `);

  } catch (error) {
    console.error('‚ùå L·ªói khi x·ª≠ l√Ω chi ti·∫øt phim:', error);
    throw error;
  } finally {
    isProcessing = false;
  }
};
